// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using KiiCorp.Cloud.Storage;

using UnityEngine;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

public class ObjectBodyPage : BasePage, IPage
{
	private KiiObject obj;

	private Encoding enc = Encoding.GetEncoding("UTF-8");

	// Object content
	private Rect contentTextRect = new Rect(0, 64, 320, 320);
	private string content = "(Progress here)";

	// text area
	private Rect bodyTextAreaRect = new Rect(0, 128, 480, 256);

	// Upload
	private Rect uploadButtonRect = new Rect(0, 384, 320, 64);

	// Download
	private Rect downloadButtonRect = new Rect(320, 384, 320, 64);

	private string body;

	private bool buttonEnable = true;

	public ObjectBodyPage (MainCamera camera, KiiObject obj) : base(camera)
	{
		this.obj = obj;
		this.body = "";
	}

	#region IPage implementation

	public void OnGUI ()
	{
		GUI.Label(messageRect, message);
		GUI.Label(contentTextRect, content);

		GUI.enabled = buttonEnable;
		bool backClicked = GUI.Button(backButtonRect, "<");
		this.body = GUI.TextArea(bodyTextAreaRect, this.body);
		bool uploadClicked = GUI.Button(uploadButtonRect, "Upload");
		bool downloadClicked = GUI.Button(downloadButtonRect, "Download");
		GUI.enabled = true;

		if (backClicked)
		{
			PerformBack();
			return;
		}
		if (uploadClicked)
		{
			PerformUpload();
			return;
		}
		if (downloadClicked)
		{
			PerformDownload();
			return;
		}
	}
	
	void PerformRefresh ()
	{
		message = "Refreshing object...";
		ButtonEnabled = false;

		obj.Refresh((KiiObject refreshedObj, Exception e) => 
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to refresh " + e.ToString();
				return;
			}
			SetContent(refreshedObj);
			message = "Refresh succeeded";
		});
	}

	void PerformUpdatePatch ()
	{
		obj["patchScore"] = 100;

		message = "Updating object(patch)...";
		ButtonEnabled = false;

		obj.Save((KiiObject updatedObj, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to update " + e.ToString();
				return;
			}
			SetContent(updatedObj);
			message = "Object updated";
		});
	}

	void PerformUpdateAll ()
	{
		obj.Remove("patchScore");
		obj["allScore"] = 100;
		obj["allName"] = "fkm";
		
		message = "Updating object(All)...";
		ButtonEnabled = false;

		obj.SaveAllFields(true, (KiiObject updatedObj, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to upadte " + e.ToString();
				return;
			}
			SetContent(updatedObj);
			message = "Object updated";
		});
	}

	void PerformDelete ()
	{
		message = "Deleting object...";
		ButtonEnabled = false;

		obj.Delete((KiiObject deletedObj, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to delete " + e.ToString();
				return;
			}
			PerformBack();
		});
	}

	void PerformListACL ()
	{
		message = "Listing ACL entries...";
		ButtonEnabled = false;

		obj.ListAclEntries((IList<KiiACLEntry<KiiObject, ObjectAction>> list, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to list ACL " + e.ToString();
				return;
			}
			message = "List ACL succeeded";
		});
	}

	void PerformRevoke (KiiACLEntry<KiiObject, ObjectAction> entry)
	{
		message = "Revoking ACL entries...";
		ButtonEnabled = false;

		entry.Save(ACLOperation.REVOKE, (KiiACLEntry<KiiObject, ObjectAction> revokedEntry, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to revoke " + e.ToString();
				Debug.Log("body : " + (e as CloudException).Body);
				return;
			}
			message = "Revoke ACL succeeded";
		});
	}

	void SetContent (KiiObject obj)
	{
		content = "";
		IEnumerable<string> keys = obj.Keys();
		foreach (string key in keys) 
		{
			content += key + " = " + obj[key] + "\n";
		}
	}

	void ShowObjectBody ()
	{
//		camera.PushPage(new GroupMenuPage(camera, group));
	}

	void PerformUpload ()
	{
		message = "Uploading object body...";
		ButtonEnabled = false;

		byte[] data = enc.GetBytes(this.body);
		MemoryStream mem = new MemoryStream();
		mem.Write(data, 0, data.Length);
		mem.Seek(0, SeekOrigin.Begin);

		obj.UploadBody("text/plain", mem, (KiiObject obj2, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to upload the body " + e.ToString();
				Debug.Log("body : " + (e as CloudException).Body);
				return;
			}
			message = "Upload body is succeeded.";
		},
		(KiiObject obj3, long doneByte, long totalByte) => 
		{
			this.content = String.Format("{0} / {1}", doneByte, totalByte);
			Debug.Log(this.content);
		});
	}

	void PerformDownload ()
	{
		message = "Downloading object body...";
		ButtonEnabled = false;

		MemoryStream mem = new MemoryStream(8192);

		obj.DownloadBody(mem, (KiiObject obj2, Stream s, Exception e) => {
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to download the body " + e.ToString();
				Debug.Log("body : " + (e as CloudException).Body);
				s.Close();
				return;
			}
			s.Seek(0, SeekOrigin.Begin);
			StreamReader sr = new StreamReader(s);
			this.body = sr.ReadToEnd();
			sr.Close();
			s.Close();
			message = "Download body is succeeded.";
		},
		(KiiObject obj3, long doneByte, long totalByte) => 
		{
			this.content = String.Format("{0} / {1}", doneByte, totalByte);
			Debug.Log(this.content);
		});
	}
	#endregion
}

