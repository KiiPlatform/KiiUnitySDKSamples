// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using KiiCorp.Cloud.Storage;

using UnityEngine;
using System;
using System.Collections.Generic;
using JsonOrg;

public class BucketPage : BasePage, IPage
{
	private KiiBucket bucket;
	private KiiGroup group;
	private string bucketName;

	// query
	private Rect queryButtonRect = new Rect(0, 128, 320, 64);

	// query by server code
	private Rect queryByServerCodeButtonRect = new Rect(320, 128, 320, 64);

	// Create object
	private Rect createButtonRect = new Rect(0, 192, 320, 64);

	// Delete bucket
	private Rect deleteButtonRect = new Rect(320, 192, 320, 64);

	private bool buttonEnable = true;
	private IList<KiiObject> objectList = new List<KiiObject>();

	public BucketPage (MainCamera camera, KiiGroup group, string  bucketName) : base(camera)
	{
		this.group = group;
		this.bucketName = bucketName;
		this.bucket = group.Bucket(bucketName);
	}

	#region IPage implementation
	public void OnGUI ()
	{
		GUI.Label(messageRect, message);

		GUI.enabled = buttonEnable;
		bool backClicked = GUI.Button(backButtonRect, "<");
		bool queryClicked = GUI.Button(queryButtonRect, "Query");
		bool queryByServerCodeClicked = GUI.Button(queryByServerCodeButtonRect, "QueryByServerCode");
		bool createClicked = GUI.Button(createButtonRect, "Create");
		bool deleteClicked = GUI.Button(deleteButtonRect, "Delete");
		for (int i = 0 ; i < objectList.Count ; ++i)
		{
			Uri uri = objectList[i].Uri;
			if (uri == null)
			{
				continue;
			}
			if (GUI.Button(new Rect(0, i * 64 + 256, 640, 64), uri.ToString()))
			{
				// object page
				ShowObjectPage(objectList[i]);
				return;
			}
		}

		GUI.enabled = true;

		if (backClicked)
		{
			PerformBack();
			return;
		}
		if (queryClicked)
		{
			PerformQuery();
			return;
		}
		if (queryByServerCodeClicked)
		{
			PerformQueryByServerCode();
			return;
		}
		if (createClicked)
		{
			PerformCreate();
			return;
		}
		if (deleteClicked)
		{
			PerformDelete();
			return;
		}
	}
	
	void PerformQuery ()
	{
		message = "Query...";
		ButtonEnabled = false;

		KiiQuery query = new KiiQuery();
		bucket.Query(query, (KiiQueryResult<KiiObject> list, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to query " + e.ToString();
				return;
			}
			objectList = list;
			message = "Query succeeded";
		});
	}

	void PerformQueryByServerCode ()
	{
		message = "QueryByServerCode...";
		ButtonEnabled = false;
		
		JsonObject rawArgs = new JsonObject();
		rawArgs.Put("baseUrl", Kii.BaseUrl);
		rawArgs.Put("groupUri",group.Uri.ToString());
		rawArgs.Put("bucketName", bucketName);
		KiiServerCodeEntryArgument args = KiiServerCodeEntryArgument.NewArgument(rawArgs);
		
		KiiServerCodeEntry entry = Kii.ServerCodeEntry("sum");

		entry.Execute(args,(KiiServerCodeEntry en, KiiServerCodeEntryArgument argument, KiiServerCodeExecResult execResult, Exception e) => 
		{
			buttonEnable = true;
			if (e != null)
			{
				message = "Failed to execute server code " + e.ToString();
				return;
			}
			JsonObject resultJson = execResult.ReturnedValue;
			message = resultJson.GetString("returnedValue");
		});


	}

	void PerformCreate ()
	{
		message = "Creating object...";
		ButtonEnabled = false;

		KiiObject kiiObject = bucket.NewKiiObject();
		kiiObject["score"] = new System.Random().Next(99);
		
		kiiObject.Save((KiiObject obj, Exception e) =>
		{
			buttonEnable = true;
			if (e != null)
			{
				message = "Failed to create object " + e.ToString();
				return;
			}
			objectList.Add(obj);
			message = "Create object succeeded";
		});
	}

	void PerformDelete ()
	{
		message = "Deleting bucket...";
		ButtonEnabled = false;

		bucket.Delete((KiiBucket deletedBucket, Exception e) =>
		{
			buttonEnable = true;
			if (e != null)
			{
				message = "Failed to delete bucket " + e.ToString();
				return;
			}
			PerformBack();
		});

	}

	void ShowObjectPage (KiiObject obj)
	{
		camera.PushPage(new ObjectPage(camera, obj));
	}

	#endregion

}

