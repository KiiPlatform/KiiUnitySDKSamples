// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using KiiCorp.Cloud.Storage;

using UnityEngine;
using System;
using System.Collections.Generic;

public class ObjectPage : BasePage, IPage
{
	private KiiObject obj;

	// Object content
	private Rect contentTextRect = new Rect(320, 64, 320, 320);
	private string content = "(not refreshed)";

	// Refresh
	private Rect refrechButtonRect = new Rect(0, 128, 320, 64);

	// Update Patch
	private Rect updatePatchButtonRect = new Rect(0, 192, 320, 64);

	// Update all field
	private Rect updateAllButtonRect = new Rect(0, 256, 320, 64);

	// Delete
	private Rect deleteButtonRect = new Rect(0, 320, 320, 64);

	// ACL entries
	private Rect listACLButtonRect = new Rect(0, 384, 320, 64);

	private bool buttonEnable = true;
	private IList<KiiACLEntry<KiiObject, ObjectAction>> aclList = new List<KiiACLEntry<KiiObject, ObjectAction>>();

	public ObjectPage (MainCamera camera, KiiObject obj) : base(camera)
	{
		this.obj = obj;
	}

	#region IPage implementation

	public void OnGUI ()
	{
		GUI.Label(messageRect, message);
		GUI.Label(contentTextRect, content);

		GUI.enabled = buttonEnable;
		bool backClicked = GUI.Button(backButtonRect, "<");
		bool refreshClicked = GUI.Button(refrechButtonRect, "Refresh");
		bool updatePatchClicked = GUI.Button(updatePatchButtonRect, "UpdatePatch");
		bool updateAllClicked = GUI.Button(updateAllButtonRect, "UpdateAll");
		bool deleteClicked = GUI.Button(deleteButtonRect, "Delete");
		bool listACLClicked = GUI.Button(listACLButtonRect, "List ACL");
		for (int i = 0 ; i < aclList.Count ; ++i)
		{
			if (GUI.Button(new Rect(0, i * 64 + 448, 640, 64), aclList[i].Action.ToString() + "/" + aclList[i].Subject.Subject))
			{
				// revoke?
				PerformRevoke(aclList[i]);
				return;
			}
		}
		GUI.enabled = true;

		if (backClicked)
		{
			PerformBack();
			return;
		}
		if (refreshClicked)
		{
			PerformRefresh();
			return;
		}
		if (updatePatchClicked)
		{
			PerformUpdatePatch();
			return;
		}
		if (updateAllClicked)
		{
			PerformUpdateAll();
			return;
		}
		if (deleteClicked)
		{
			PerformDelete();
			return;
		}
		if (listACLClicked)
		{
			PerformListACL();
			return;
		}
	}
	
	void PerformRefresh ()
	{
		message = "Refreshing object...";
		ButtonEnabled = false;

		obj.Refresh((KiiObject refreshedObj, Exception e) => 
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to refresh " + e.ToString();
				return;
			}
			SetContent(refreshedObj);
			message = "Refresh succeeded";
		});
	}

	void PerformUpdatePatch ()
	{
		obj["patchScore"] = 100;

		message = "Updating object(patch)...";
		ButtonEnabled = false;

		obj.Save((KiiObject updatedObj, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to update " + e.ToString();
				return;
			}
			SetContent(updatedObj);
			message = "Object updated";
		});
	}

	void PerformUpdateAll ()
	{
		obj.Remove("patchScore");
		obj["allScore"] = 100;
		obj["allName"] = "fkm";
		
		message = "Updating object(All)...";
		ButtonEnabled = false;

		obj.SaveAllFields(true, (KiiObject updatedObj, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to upadte " + e.ToString();
				return;
			}
			SetContent(updatedObj);
			message = "Object updated";
		});
	}

	void PerformDelete ()
	{
		message = "Deleting object...";
		ButtonEnabled = false;

		obj.Delete((KiiObject deletedObj, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to delete " + e.ToString();
				return;
			}
			PerformBack();
		});
	}

	void PerformListACL ()
	{
		message = "Listing ACL entries...";
		ButtonEnabled = false;

		obj.ListAclEntries((IList<KiiACLEntry<KiiObject, ObjectAction>> list, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to list ACL " + e.ToString();
				return;
			}
			aclList = list;
			message = "List ACL succeeded";
		});
	}

	void PerformRevoke (KiiACLEntry<KiiObject, ObjectAction> entry)
	{
		message = "Revoking ACL entries...";
		ButtonEnabled = false;

		entry.Save(ACLOperation.REVOKE, (KiiACLEntry<KiiObject, ObjectAction> revokedEntry, Exception e) =>
		{
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to revoke " + e.ToString();
				Debug.Log("body : " + (e as CloudException).Body);
				return;
			}
			aclList.Clear();
			message = "Revoke ACL succeeded";
		});
	}

	void SetContent (KiiObject obj)
	{
		content = "";
		IEnumerable<string> keys = obj.Keys();
		foreach (string key in keys) 
		{
			content += key + " = " + obj[key] + "\n";
		}
	}
	#endregion
}

