// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using KiiCorp.Cloud.Storage;
using UnityEngine;
using System;
using System.Collections.Generic;

public class GroupMenuPage : BasePage, IPage
{
	private KiiGroup currentGroup = null;

	// List member
	private Rect listMemberButtonRect = new Rect(0, 128, 320, 64);
	
	// Refresh group
	private Rect refreshButtonRect = new Rect(0, 192, 320, 64);
	
	// Delete group
	private Rect deleteButtonRect = new Rect(320, 192, 320, 64);
	
	// Change group name
	private Rect newNameTextRect = new Rect(0, 256, 320, 64);
	private string newName = "";
	private Rect changeNameButtonRect = new Rect(320, 256, 320, 64);
	
	// Go to Bucket
	private Rect bucketNameTextRect = new Rect (0, 320, 320, 64);
	private string bucketName = "";
	private Rect showBucketButtonRect = new Rect(320, 320, 320, 64);
	
	// Add member
	private Rect newUsernameTextRect = new Rect(0, 384, 320, 64);
	private string newUsername = "";
	private Rect addMemberButtonRect = new Rect(320, 384, 320, 64);
	
	private IList<KiiUser> members = new List<KiiUser>();


	public GroupMenuPage (MainCamera camera, KiiGroup group) : base(camera)
	{
		this.currentGroup = group;
		this.newName = group.Name;
	}

	#region IPage implementation
	
	public void OnGUI ()
	{
		GUI.Label(messageRect, message);

		GUI.enabled = ButtonEnabled;
		bool backClicked = GUI.Button(backButtonRect, "<");

		newName = GUI.TextField(newNameTextRect, newName);
		bucketName = GUI.TextField(bucketNameTextRect, bucketName);
		newUsername = GUI.TextField(newUsernameTextRect, newUsername);
		
		GUI.enabled = ButtonEnabled;
		bool listMemberClicked = GUI.Button(listMemberButtonRect, "Get members");
		bool refreshClicked = GUI.Button(refreshButtonRect, "Refresh");
		bool deleteClicked = GUI.Button(deleteButtonRect, "Delete");
		bool changeNameClicked = GUI.Button(changeNameButtonRect, "Change Name");
		bool showBucketClicked = GUI.Button(showBucketButtonRect, "Bucket");
		bool addMemberClicked = GUI.Button(addMemberButtonRect, "Add member");
		for (int i = 0 ; i < members.Count ; ++i)
		{
			if (GUI.Button(new Rect(0, i * 64 + 448, 640, 64), members[i].Uri.ToString()))
			{
				// remove ?
				PerformRemoveUser(members[i]);
				return;
			}
		}
		GUI.enabled = true;

		if (backClicked)
		{
			PerformBack();
			return;
		}
		if (listMemberClicked)
		{
			PerformListMember();
			return;
		}
		if (refreshClicked)
		{
			PerformRefresh();
			return;
		}
		if (deleteClicked)
		{
			PerformDelete();
			return;
		}
		if (changeNameClicked)
		{
			PerformChangeName(newName);
			return;
		}
		if (showBucketClicked)
		{
			ShowBucket(bucketName);
			return;
		}
		if (addMemberClicked)
		{
			PerformAddUser(newUsername);
			return;
		}
	}

	void PerformListMember ()
	{
		message = "Getting group members...";
		ButtonEnabled = false;
		
		currentGroup.ListMembers((IList<KiiUser> list, Exception e) =>
		                         {
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to get members " + e.Message;
				return;
			}
			members = list;
			message = "List members succeeded";
		});
		
	}
	
	void PerformRefresh ()
	{
		message = "Refresh group...";
		ButtonEnabled = false;
		
		currentGroup.Refresh((KiiGroup group, Exception e) =>
		                     {
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to refresh group " + e.ToString();
				return;
			}
			currentGroup = group;
			message = "Refresh group succeeded";
		});
	}
	
	void PerformDelete ()
	{
		message = "Delete group...";
		ButtonEnabled = false;
		
		currentGroup.Delete((KiiGroup group, Exception e) =>
		                    {
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to delete group " + e.ToString();
				return;
			}
			message = "Delete group succeeded";
			currentGroup = null;
		});
		
	}
	
	void PerformChangeName (string name)
	{
		message = "Changing group name...";
		ButtonEnabled = false;
		
		currentGroup.ChangeName(name, (KiiGroup group, Exception e) =>
		                        {
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to change group name " + e.ToString();
				return;
			}
			message = "Change group name succeeded";
		});
	}
	
	void ShowBucket (string bucketName)
	{
		camera.PushPage(new BucketPage(camera, currentGroup, bucketName));
	}
	
	void PerformAddUser (string username)
	{
		message = "Finding user...";
		ButtonEnabled = false;
		
		KiiUser.FindUserByUserName(username, (KiiUser user, Exception e) =>
		                           {
			if (e != null)
			{
				ButtonEnabled = true;
				message = "Failed to find user " + e.Message;
				return;
			}
			
			message = "Adding user....";
			
			currentGroup.AddUser(user);
			currentGroup.Save((KiiGroup group, Exception e2) =>
			                  {
				ButtonEnabled = true;
				if (e2 != null)
				{
					message = "Failed to add user " + e.ToString();
					return;
				}
				message = "Add user succeeded";
			});
		});
	}
	
	void PerformRemoveUser (KiiUser user)
	{
		message = "Removing user...";
		ButtonEnabled = false;
		
		currentGroup.RemoveUser(user);
		currentGroup.Save((KiiGroup group, Exception e) =>
		                  {
			ButtonEnabled = true;
			if (e != null)
			{
				message = "Failed to remove user " + e.ToString();
				return;
			}
			message = "Remove user succeeded";
		});
	}
	#endregion
}

